#!/bin/bash

set -e

# Human readable limits
BINARY_SIZE_LIMIT_MB=50
BASE_LATENCY_LIMIT_SEC=0.05

if [ -t 1 ] && [ -n "$TERM" ] && [ "$TERM" != "dumb" ]; then
    RED=$(tput setaf 1)
    GREEN=$(tput setaf 2)
    # YELLOW=$(tput setaf 3)
    BLUE=$(tput setaf 4)
    BOLD=$(tput bold)
    RESET=$(tput sgr0)
else
    RED=""
    GREEN=""
    # YELLOW=""
    BLUE=""
    BOLD=""
    RESET=""
fi

echo "${BOLD}                    Benchmarking rabbet                     ${RESET}"
echo ""

echo "-------------------- Validating Setup --------------------"

# Check for required hyperfine
if ! command -v hyperfine &> /dev/null; then
    echo "${RED}ERROR - hyperfine is required for benchmarking.${RESET}"
    echo "${BLUE}  https://github.com/sharkdp/hyperfine#installation${RESET}"
    exit 1
fi

# Check for test data files
CUSTOMERS_FILE="tests/data/basic/customers.csv"
ORDERS_FILE="tests/data/basic/orders.csv"
PRODUCTS_FILE="tests/data/basic/products.csv"

if [[ ! -f "$CUSTOMERS_FILE" ]] || [[ ! -f "$ORDERS_FILE" ]] || [[ ! -f "$PRODUCTS_FILE" ]]; then
    echo "${RED}ERROR - Test data files not found. Please run from project root.${RESET}"
    exit 1
fi
echo "${GREEN}âœ“ All prerequisites met${RESET}"
echo ""

echo "-------------------- Building release binary --------------------"
cargo build --release
echo ""

echo "-------------------- Checking binary size --------------------"
BINARY_PATH="target/release/rabbet"
BINARY_SIZE_BYTES=$(stat -f%z "$BINARY_PATH" 2>/dev/null || stat -c%s "$BINARY_PATH")
BINARY_SIZE_MB=$(echo "scale=2; $BINARY_SIZE_BYTES / 1024 / 1024" | bc -l)

if (( $(echo "$BINARY_SIZE_MB > $BINARY_SIZE_LIMIT_MB" | bc -l) )); then
    echo "${RED}âœ— Binary size ($BINARY_SIZE_MB MB) exceeds $BINARY_SIZE_LIMIT_MB MB limit!${RESET}"
    exit 1
else
    echo "${GREEN}âœ“ Binary size: $BINARY_SIZE_MB MB (limit: $BINARY_SIZE_LIMIT_MB MB)${RESET}"
fi
echo ""

echo "-------------------- Running benchmarks --------------------"

# Track benchmark results for summary
declare -a BENCHMARK_NAMES
declare -a BENCHMARK_TIMES
declare -a BENCHMARK_PASSED
FAILED_COUNT=0

# Function to run a benchmark
run_benchmark() {
    local name="$1"
    local command="$2"
    local temp_file="/tmp/${name}_results.json"

    echo ""
    echo "${BOLD}Benchmark: $name${RESET}"
    echo "${BLUE}Command: $command${RESET}"

    # Run hyperfine with JSON export
    hyperfine \
        --warmup 3 \
        --runs 10 \
        --export-json "$temp_file" \
        "$command"

    # Extract and analyze results
    if [[ -f "$temp_file" ]]; then
        local mean_time
        mean_time=$(jq -r '.results[0].mean' "$temp_file")

        # Store results for summary
        BENCHMARK_NAMES+=("$name")
        BENCHMARK_TIMES+=("$mean_time")

        # Check against threshold
        if (( $(echo "$mean_time < $BASE_LATENCY_LIMIT_SEC" | bc -l) )); then
            echo "${GREEN}âœ“ PASSED - Mean time: $(printf "%.4fs" "$mean_time") < ${BASE_LATENCY_LIMIT_SEC}s${RESET}"
            BENCHMARK_PASSED+=(1)
        else
            echo "${RED}âœ— FAILED - Mean time: $(printf "%.4fs" "$mean_time") > ${BASE_LATENCY_LIMIT_SEC}s${RESET}"
            BENCHMARK_PASSED+=(0)
            ((FAILED_COUNT++))
        fi

        # Clean up temp file
        rm -f "$temp_file"
    fi
}

# Run all benchmarks
run_benchmark "cat" \
    "$BINARY_PATH cat $CUSTOMERS_FILE --format csv"

run_benchmark "head" \
    "$BINARY_PATH head $ORDERS_FILE -n 3 --format csv"

run_benchmark "tail" \
    "$BINARY_PATH tail $ORDERS_FILE -n 3 --format csv"

run_benchmark "join" \
    "$BINARY_PATH join $CUSTOMERS_FILE $ORDERS_FILE --on customer_id --format csv"

run_benchmark "query_filter" \
    "$BINARY_PATH query $ORDERS_FILE --as orders -- \"SELECT * FROM orders WHERE price > 30\""

run_benchmark "query_complex" \
    "$BINARY_PATH query $CUSTOMERS_FILE $ORDERS_FILE $PRODUCTS_FILE --as customers,orders,products -- \"SELECT c.customer_name, o.order_id, p.product_name, o.price FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN products p ON o.product_id = p.product_id\""

echo ""
echo "==================== Benchmark Summary ===================="
echo ""
printf "%-20s %10s %10s\n" "Benchmark" "Time (s)" "Status"
printf "%-20s %10s %10s\n" "---------" "--------" "------"

for i in "${!BENCHMARK_NAMES[@]}"; do
    name="${BENCHMARK_NAMES[$i]}"
    time="${BENCHMARK_TIMES[$i]}"
    passed="${BENCHMARK_PASSED[$i]}"

    if [[ "$passed" == "1" ]]; then
        status="${GREEN}PASSED${RESET}"
    else
        status="${RED}FAILED${RESET}"
    fi

    printf "%-20s %10.4f %10s\n" "$name" "$time" "$status"
done

echo ""
echo "Binary Size: ${BINARY_SIZE_MB} MB / ${BINARY_SIZE_LIMIT_MB} MB"
echo "Latency Threshold: ${BASE_LATENCY_LIMIT_SEC}s"
echo ""

if [[ $FAILED_COUNT -eq 0 ]]; then
    echo "${GREEN}${BOLD}All benchmarks passed! ðŸŽ‰${RESET}"
    exit 0
else
    echo "${RED}${BOLD}$FAILED_COUNT benchmark(s) failed!${RESET}"
    exit 1
fi
